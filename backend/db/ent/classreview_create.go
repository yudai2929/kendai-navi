// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yudai2929/kendai-navi/backend/db/ent/classreview"
	"github.com/yudai2929/kendai-navi/backend/db/ent/classreviewlike"
	"github.com/yudai2929/kendai-navi/backend/db/ent/user"
)

// ClassReviewCreate is the builder for creating a ClassReview entity.
type ClassReviewCreate struct {
	config
	mutation *ClassReviewMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (crc *ClassReviewCreate) SetUserID(s string) *ClassReviewCreate {
	crc.mutation.SetUserID(s)
	return crc
}

// SetClassID sets the "class_id" field.
func (crc *ClassReviewCreate) SetClassID(i int) *ClassReviewCreate {
	crc.mutation.SetClassID(i)
	return crc
}

// SetTeacherID sets the "teacher_id" field.
func (crc *ClassReviewCreate) SetTeacherID(i int) *ClassReviewCreate {
	crc.mutation.SetTeacherID(i)
	return crc
}

// SetComment sets the "comment" field.
func (crc *ClassReviewCreate) SetComment(s string) *ClassReviewCreate {
	crc.mutation.SetComment(s)
	return crc
}

// SetClassYear sets the "class_year" field.
func (crc *ClassReviewCreate) SetClassYear(i int) *ClassReviewCreate {
	crc.mutation.SetClassYear(i)
	return crc
}

// SetTerm sets the "term" field.
func (crc *ClassReviewCreate) SetTerm(i int) *ClassReviewCreate {
	crc.mutation.SetTerm(i)
	return crc
}

// SetSatisfactionLevel sets the "satisfaction_level" field.
func (crc *ClassReviewCreate) SetSatisfactionLevel(i int) *ClassReviewCreate {
	crc.mutation.SetSatisfactionLevel(i)
	return crc
}

// SetEasyLevel sets the "easy_level" field.
func (crc *ClassReviewCreate) SetEasyLevel(i int) *ClassReviewCreate {
	crc.mutation.SetEasyLevel(i)
	return crc
}

// SetAttendanceMethod sets the "attendance_method" field.
func (crc *ClassReviewCreate) SetAttendanceMethod(i int) *ClassReviewCreate {
	crc.mutation.SetAttendanceMethod(i)
	return crc
}

// SetEvaluationMethod sets the "evaluation_method" field.
func (crc *ClassReviewCreate) SetEvaluationMethod(i int) *ClassReviewCreate {
	crc.mutation.SetEvaluationMethod(i)
	return crc
}

// SetCreatedAt sets the "created_at" field.
func (crc *ClassReviewCreate) SetCreatedAt(t time.Time) *ClassReviewCreate {
	crc.mutation.SetCreatedAt(t)
	return crc
}

// SetUpdatedAt sets the "updated_at" field.
func (crc *ClassReviewCreate) SetUpdatedAt(t time.Time) *ClassReviewCreate {
	crc.mutation.SetUpdatedAt(t)
	return crc
}

// SetID sets the "id" field.
func (crc *ClassReviewCreate) SetID(s string) *ClassReviewCreate {
	crc.mutation.SetID(s)
	return crc
}

// SetUsersID sets the "users" edge to the User entity by ID.
func (crc *ClassReviewCreate) SetUsersID(id string) *ClassReviewCreate {
	crc.mutation.SetUsersID(id)
	return crc
}

// SetUsers sets the "users" edge to the User entity.
func (crc *ClassReviewCreate) SetUsers(u *User) *ClassReviewCreate {
	return crc.SetUsersID(u.ID)
}

// AddClassReviewLikeIDs adds the "class_review_likes" edge to the ClassReviewLike entity by IDs.
func (crc *ClassReviewCreate) AddClassReviewLikeIDs(ids ...int) *ClassReviewCreate {
	crc.mutation.AddClassReviewLikeIDs(ids...)
	return crc
}

// AddClassReviewLikes adds the "class_review_likes" edges to the ClassReviewLike entity.
func (crc *ClassReviewCreate) AddClassReviewLikes(c ...*ClassReviewLike) *ClassReviewCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return crc.AddClassReviewLikeIDs(ids...)
}

// Mutation returns the ClassReviewMutation object of the builder.
func (crc *ClassReviewCreate) Mutation() *ClassReviewMutation {
	return crc.mutation
}

// Save creates the ClassReview in the database.
func (crc *ClassReviewCreate) Save(ctx context.Context) (*ClassReview, error) {
	return withHooks(ctx, crc.sqlSave, crc.mutation, crc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (crc *ClassReviewCreate) SaveX(ctx context.Context) *ClassReview {
	v, err := crc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (crc *ClassReviewCreate) Exec(ctx context.Context) error {
	_, err := crc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (crc *ClassReviewCreate) ExecX(ctx context.Context) {
	if err := crc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (crc *ClassReviewCreate) check() error {
	if _, ok := crc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "ClassReview.user_id"`)}
	}
	if _, ok := crc.mutation.ClassID(); !ok {
		return &ValidationError{Name: "class_id", err: errors.New(`ent: missing required field "ClassReview.class_id"`)}
	}
	if _, ok := crc.mutation.TeacherID(); !ok {
		return &ValidationError{Name: "teacher_id", err: errors.New(`ent: missing required field "ClassReview.teacher_id"`)}
	}
	if _, ok := crc.mutation.Comment(); !ok {
		return &ValidationError{Name: "comment", err: errors.New(`ent: missing required field "ClassReview.comment"`)}
	}
	if _, ok := crc.mutation.ClassYear(); !ok {
		return &ValidationError{Name: "class_year", err: errors.New(`ent: missing required field "ClassReview.class_year"`)}
	}
	if _, ok := crc.mutation.Term(); !ok {
		return &ValidationError{Name: "term", err: errors.New(`ent: missing required field "ClassReview.term"`)}
	}
	if _, ok := crc.mutation.SatisfactionLevel(); !ok {
		return &ValidationError{Name: "satisfaction_level", err: errors.New(`ent: missing required field "ClassReview.satisfaction_level"`)}
	}
	if _, ok := crc.mutation.EasyLevel(); !ok {
		return &ValidationError{Name: "easy_level", err: errors.New(`ent: missing required field "ClassReview.easy_level"`)}
	}
	if _, ok := crc.mutation.AttendanceMethod(); !ok {
		return &ValidationError{Name: "attendance_method", err: errors.New(`ent: missing required field "ClassReview.attendance_method"`)}
	}
	if _, ok := crc.mutation.EvaluationMethod(); !ok {
		return &ValidationError{Name: "evaluation_method", err: errors.New(`ent: missing required field "ClassReview.evaluation_method"`)}
	}
	if _, ok := crc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ClassReview.created_at"`)}
	}
	if _, ok := crc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ClassReview.updated_at"`)}
	}
	if _, ok := crc.mutation.UsersID(); !ok {
		return &ValidationError{Name: "users", err: errors.New(`ent: missing required edge "ClassReview.users"`)}
	}
	return nil
}

func (crc *ClassReviewCreate) sqlSave(ctx context.Context) (*ClassReview, error) {
	if err := crc.check(); err != nil {
		return nil, err
	}
	_node, _spec := crc.createSpec()
	if err := sqlgraph.CreateNode(ctx, crc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected ClassReview.ID type: %T", _spec.ID.Value)
		}
	}
	crc.mutation.id = &_node.ID
	crc.mutation.done = true
	return _node, nil
}

func (crc *ClassReviewCreate) createSpec() (*ClassReview, *sqlgraph.CreateSpec) {
	var (
		_node = &ClassReview{config: crc.config}
		_spec = sqlgraph.NewCreateSpec(classreview.Table, sqlgraph.NewFieldSpec(classreview.FieldID, field.TypeString))
	)
	if id, ok := crc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := crc.mutation.ClassID(); ok {
		_spec.SetField(classreview.FieldClassID, field.TypeInt, value)
		_node.ClassID = value
	}
	if value, ok := crc.mutation.TeacherID(); ok {
		_spec.SetField(classreview.FieldTeacherID, field.TypeInt, value)
		_node.TeacherID = value
	}
	if value, ok := crc.mutation.Comment(); ok {
		_spec.SetField(classreview.FieldComment, field.TypeString, value)
		_node.Comment = value
	}
	if value, ok := crc.mutation.ClassYear(); ok {
		_spec.SetField(classreview.FieldClassYear, field.TypeInt, value)
		_node.ClassYear = value
	}
	if value, ok := crc.mutation.Term(); ok {
		_spec.SetField(classreview.FieldTerm, field.TypeInt, value)
		_node.Term = value
	}
	if value, ok := crc.mutation.SatisfactionLevel(); ok {
		_spec.SetField(classreview.FieldSatisfactionLevel, field.TypeInt, value)
		_node.SatisfactionLevel = value
	}
	if value, ok := crc.mutation.EasyLevel(); ok {
		_spec.SetField(classreview.FieldEasyLevel, field.TypeInt, value)
		_node.EasyLevel = value
	}
	if value, ok := crc.mutation.AttendanceMethod(); ok {
		_spec.SetField(classreview.FieldAttendanceMethod, field.TypeInt, value)
		_node.AttendanceMethod = value
	}
	if value, ok := crc.mutation.EvaluationMethod(); ok {
		_spec.SetField(classreview.FieldEvaluationMethod, field.TypeInt, value)
		_node.EvaluationMethod = value
	}
	if value, ok := crc.mutation.CreatedAt(); ok {
		_spec.SetField(classreview.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := crc.mutation.UpdatedAt(); ok {
		_spec.SetField(classreview.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := crc.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   classreview.UsersTable,
			Columns: []string{classreview.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := crc.mutation.ClassReviewLikesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   classreview.ClassReviewLikesTable,
			Columns: []string{classreview.ClassReviewLikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(classreviewlike.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ClassReviewCreateBulk is the builder for creating many ClassReview entities in bulk.
type ClassReviewCreateBulk struct {
	config
	err      error
	builders []*ClassReviewCreate
}

// Save creates the ClassReview entities in the database.
func (crcb *ClassReviewCreateBulk) Save(ctx context.Context) ([]*ClassReview, error) {
	if crcb.err != nil {
		return nil, crcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(crcb.builders))
	nodes := make([]*ClassReview, len(crcb.builders))
	mutators := make([]Mutator, len(crcb.builders))
	for i := range crcb.builders {
		func(i int, root context.Context) {
			builder := crcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ClassReviewMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, crcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, crcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, crcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (crcb *ClassReviewCreateBulk) SaveX(ctx context.Context) []*ClassReview {
	v, err := crcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (crcb *ClassReviewCreateBulk) Exec(ctx context.Context) error {
	_, err := crcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (crcb *ClassReviewCreateBulk) ExecX(ctx context.Context) {
	if err := crcb.Exec(ctx); err != nil {
		panic(err)
	}
}
