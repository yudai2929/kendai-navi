// Code generated by ent, DO NOT EDIT.

package classreview

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the classreview type in the database.
	Label = "class_review"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldClassID holds the string denoting the class_id field in the database.
	FieldClassID = "class_id"
	// FieldTeacherID holds the string denoting the teacher_id field in the database.
	FieldTeacherID = "teacher_id"
	// FieldComment holds the string denoting the comment field in the database.
	FieldComment = "comment"
	// FieldClassYear holds the string denoting the class_year field in the database.
	FieldClassYear = "class_year"
	// FieldTerm holds the string denoting the term field in the database.
	FieldTerm = "term"
	// FieldSatisfactionLevel holds the string denoting the satisfaction_level field in the database.
	FieldSatisfactionLevel = "satisfaction_level"
	// FieldEasyLevel holds the string denoting the easy_level field in the database.
	FieldEasyLevel = "easy_level"
	// FieldAttendanceMethod holds the string denoting the attendance_method field in the database.
	FieldAttendanceMethod = "attendance_method"
	// FieldEvaluationMethod holds the string denoting the evaluation_method field in the database.
	FieldEvaluationMethod = "evaluation_method"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeUsers holds the string denoting the users edge name in mutations.
	EdgeUsers = "users"
	// EdgeClassReviewLikes holds the string denoting the class_review_likes edge name in mutations.
	EdgeClassReviewLikes = "class_review_likes"
	// Table holds the table name of the classreview in the database.
	Table = "class_reviews"
	// UsersTable is the table that holds the users relation/edge.
	UsersTable = "class_reviews"
	// UsersInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UsersInverseTable = "users"
	// UsersColumn is the table column denoting the users relation/edge.
	UsersColumn = "user_id"
	// ClassReviewLikesTable is the table that holds the class_review_likes relation/edge.
	ClassReviewLikesTable = "class_review_likes"
	// ClassReviewLikesInverseTable is the table name for the ClassReviewLike entity.
	// It exists in this package in order to avoid circular dependency with the "classreviewlike" package.
	ClassReviewLikesInverseTable = "class_review_likes"
	// ClassReviewLikesColumn is the table column denoting the class_review_likes relation/edge.
	ClassReviewLikesColumn = "class_review_id"
)

// Columns holds all SQL columns for classreview fields.
var Columns = []string{
	FieldID,
	FieldUserID,
	FieldClassID,
	FieldTeacherID,
	FieldComment,
	FieldClassYear,
	FieldTerm,
	FieldSatisfactionLevel,
	FieldEasyLevel,
	FieldAttendanceMethod,
	FieldEvaluationMethod,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the ClassReview queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByClassID orders the results by the class_id field.
func ByClassID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClassID, opts...).ToFunc()
}

// ByTeacherID orders the results by the teacher_id field.
func ByTeacherID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTeacherID, opts...).ToFunc()
}

// ByComment orders the results by the comment field.
func ByComment(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldComment, opts...).ToFunc()
}

// ByClassYear orders the results by the class_year field.
func ByClassYear(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClassYear, opts...).ToFunc()
}

// ByTerm orders the results by the term field.
func ByTerm(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTerm, opts...).ToFunc()
}

// BySatisfactionLevel orders the results by the satisfaction_level field.
func BySatisfactionLevel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSatisfactionLevel, opts...).ToFunc()
}

// ByEasyLevel orders the results by the easy_level field.
func ByEasyLevel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEasyLevel, opts...).ToFunc()
}

// ByAttendanceMethod orders the results by the attendance_method field.
func ByAttendanceMethod(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAttendanceMethod, opts...).ToFunc()
}

// ByEvaluationMethod orders the results by the evaluation_method field.
func ByEvaluationMethod(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEvaluationMethod, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByUsersField orders the results by users field.
func ByUsersField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUsersStep(), sql.OrderByField(field, opts...))
	}
}

// ByClassReviewLikesCount orders the results by class_review_likes count.
func ByClassReviewLikesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newClassReviewLikesStep(), opts...)
	}
}

// ByClassReviewLikes orders the results by class_review_likes terms.
func ByClassReviewLikes(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newClassReviewLikesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newUsersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UsersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UsersTable, UsersColumn),
	)
}
func newClassReviewLikesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ClassReviewLikesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ClassReviewLikesTable, ClassReviewLikesColumn),
	)
}
