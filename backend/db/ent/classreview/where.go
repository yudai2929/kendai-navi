// Code generated by ent, DO NOT EDIT.

package classreview

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/yudai2929/kendai-navi/backend/db/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldContainsFold(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v string) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldEQ(FieldUserID, v))
}

// ClassID applies equality check predicate on the "class_id" field. It's identical to ClassIDEQ.
func ClassID(v int) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldEQ(FieldClassID, v))
}

// TeacherID applies equality check predicate on the "teacher_id" field. It's identical to TeacherIDEQ.
func TeacherID(v int) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldEQ(FieldTeacherID, v))
}

// Comment applies equality check predicate on the "comment" field. It's identical to CommentEQ.
func Comment(v string) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldEQ(FieldComment, v))
}

// ClassYear applies equality check predicate on the "class_year" field. It's identical to ClassYearEQ.
func ClassYear(v int) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldEQ(FieldClassYear, v))
}

// Term applies equality check predicate on the "term" field. It's identical to TermEQ.
func Term(v int) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldEQ(FieldTerm, v))
}

// SatisfactionLevel applies equality check predicate on the "satisfaction_level" field. It's identical to SatisfactionLevelEQ.
func SatisfactionLevel(v int) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldEQ(FieldSatisfactionLevel, v))
}

// EasyLevel applies equality check predicate on the "easy_level" field. It's identical to EasyLevelEQ.
func EasyLevel(v int) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldEQ(FieldEasyLevel, v))
}

// AttendanceMethod applies equality check predicate on the "attendance_method" field. It's identical to AttendanceMethodEQ.
func AttendanceMethod(v int) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldEQ(FieldAttendanceMethod, v))
}

// EvaluationMethod applies equality check predicate on the "evaluation_method" field. It's identical to EvaluationMethodEQ.
func EvaluationMethod(v int) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldEQ(FieldEvaluationMethod, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldEQ(FieldUpdatedAt, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v string) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v string) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...string) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...string) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v string) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v string) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v string) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v string) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldLTE(FieldUserID, v))
}

// UserIDContains applies the Contains predicate on the "user_id" field.
func UserIDContains(v string) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldContains(FieldUserID, v))
}

// UserIDHasPrefix applies the HasPrefix predicate on the "user_id" field.
func UserIDHasPrefix(v string) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldHasPrefix(FieldUserID, v))
}

// UserIDHasSuffix applies the HasSuffix predicate on the "user_id" field.
func UserIDHasSuffix(v string) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldHasSuffix(FieldUserID, v))
}

// UserIDEqualFold applies the EqualFold predicate on the "user_id" field.
func UserIDEqualFold(v string) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldEqualFold(FieldUserID, v))
}

// UserIDContainsFold applies the ContainsFold predicate on the "user_id" field.
func UserIDContainsFold(v string) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldContainsFold(FieldUserID, v))
}

// ClassIDEQ applies the EQ predicate on the "class_id" field.
func ClassIDEQ(v int) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldEQ(FieldClassID, v))
}

// ClassIDNEQ applies the NEQ predicate on the "class_id" field.
func ClassIDNEQ(v int) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldNEQ(FieldClassID, v))
}

// ClassIDIn applies the In predicate on the "class_id" field.
func ClassIDIn(vs ...int) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldIn(FieldClassID, vs...))
}

// ClassIDNotIn applies the NotIn predicate on the "class_id" field.
func ClassIDNotIn(vs ...int) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldNotIn(FieldClassID, vs...))
}

// ClassIDGT applies the GT predicate on the "class_id" field.
func ClassIDGT(v int) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldGT(FieldClassID, v))
}

// ClassIDGTE applies the GTE predicate on the "class_id" field.
func ClassIDGTE(v int) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldGTE(FieldClassID, v))
}

// ClassIDLT applies the LT predicate on the "class_id" field.
func ClassIDLT(v int) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldLT(FieldClassID, v))
}

// ClassIDLTE applies the LTE predicate on the "class_id" field.
func ClassIDLTE(v int) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldLTE(FieldClassID, v))
}

// TeacherIDEQ applies the EQ predicate on the "teacher_id" field.
func TeacherIDEQ(v int) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldEQ(FieldTeacherID, v))
}

// TeacherIDNEQ applies the NEQ predicate on the "teacher_id" field.
func TeacherIDNEQ(v int) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldNEQ(FieldTeacherID, v))
}

// TeacherIDIn applies the In predicate on the "teacher_id" field.
func TeacherIDIn(vs ...int) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldIn(FieldTeacherID, vs...))
}

// TeacherIDNotIn applies the NotIn predicate on the "teacher_id" field.
func TeacherIDNotIn(vs ...int) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldNotIn(FieldTeacherID, vs...))
}

// TeacherIDGT applies the GT predicate on the "teacher_id" field.
func TeacherIDGT(v int) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldGT(FieldTeacherID, v))
}

// TeacherIDGTE applies the GTE predicate on the "teacher_id" field.
func TeacherIDGTE(v int) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldGTE(FieldTeacherID, v))
}

// TeacherIDLT applies the LT predicate on the "teacher_id" field.
func TeacherIDLT(v int) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldLT(FieldTeacherID, v))
}

// TeacherIDLTE applies the LTE predicate on the "teacher_id" field.
func TeacherIDLTE(v int) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldLTE(FieldTeacherID, v))
}

// CommentEQ applies the EQ predicate on the "comment" field.
func CommentEQ(v string) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldEQ(FieldComment, v))
}

// CommentNEQ applies the NEQ predicate on the "comment" field.
func CommentNEQ(v string) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldNEQ(FieldComment, v))
}

// CommentIn applies the In predicate on the "comment" field.
func CommentIn(vs ...string) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldIn(FieldComment, vs...))
}

// CommentNotIn applies the NotIn predicate on the "comment" field.
func CommentNotIn(vs ...string) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldNotIn(FieldComment, vs...))
}

// CommentGT applies the GT predicate on the "comment" field.
func CommentGT(v string) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldGT(FieldComment, v))
}

// CommentGTE applies the GTE predicate on the "comment" field.
func CommentGTE(v string) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldGTE(FieldComment, v))
}

// CommentLT applies the LT predicate on the "comment" field.
func CommentLT(v string) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldLT(FieldComment, v))
}

// CommentLTE applies the LTE predicate on the "comment" field.
func CommentLTE(v string) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldLTE(FieldComment, v))
}

// CommentContains applies the Contains predicate on the "comment" field.
func CommentContains(v string) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldContains(FieldComment, v))
}

// CommentHasPrefix applies the HasPrefix predicate on the "comment" field.
func CommentHasPrefix(v string) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldHasPrefix(FieldComment, v))
}

// CommentHasSuffix applies the HasSuffix predicate on the "comment" field.
func CommentHasSuffix(v string) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldHasSuffix(FieldComment, v))
}

// CommentEqualFold applies the EqualFold predicate on the "comment" field.
func CommentEqualFold(v string) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldEqualFold(FieldComment, v))
}

// CommentContainsFold applies the ContainsFold predicate on the "comment" field.
func CommentContainsFold(v string) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldContainsFold(FieldComment, v))
}

// ClassYearEQ applies the EQ predicate on the "class_year" field.
func ClassYearEQ(v int) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldEQ(FieldClassYear, v))
}

// ClassYearNEQ applies the NEQ predicate on the "class_year" field.
func ClassYearNEQ(v int) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldNEQ(FieldClassYear, v))
}

// ClassYearIn applies the In predicate on the "class_year" field.
func ClassYearIn(vs ...int) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldIn(FieldClassYear, vs...))
}

// ClassYearNotIn applies the NotIn predicate on the "class_year" field.
func ClassYearNotIn(vs ...int) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldNotIn(FieldClassYear, vs...))
}

// ClassYearGT applies the GT predicate on the "class_year" field.
func ClassYearGT(v int) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldGT(FieldClassYear, v))
}

// ClassYearGTE applies the GTE predicate on the "class_year" field.
func ClassYearGTE(v int) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldGTE(FieldClassYear, v))
}

// ClassYearLT applies the LT predicate on the "class_year" field.
func ClassYearLT(v int) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldLT(FieldClassYear, v))
}

// ClassYearLTE applies the LTE predicate on the "class_year" field.
func ClassYearLTE(v int) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldLTE(FieldClassYear, v))
}

// TermEQ applies the EQ predicate on the "term" field.
func TermEQ(v int) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldEQ(FieldTerm, v))
}

// TermNEQ applies the NEQ predicate on the "term" field.
func TermNEQ(v int) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldNEQ(FieldTerm, v))
}

// TermIn applies the In predicate on the "term" field.
func TermIn(vs ...int) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldIn(FieldTerm, vs...))
}

// TermNotIn applies the NotIn predicate on the "term" field.
func TermNotIn(vs ...int) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldNotIn(FieldTerm, vs...))
}

// TermGT applies the GT predicate on the "term" field.
func TermGT(v int) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldGT(FieldTerm, v))
}

// TermGTE applies the GTE predicate on the "term" field.
func TermGTE(v int) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldGTE(FieldTerm, v))
}

// TermLT applies the LT predicate on the "term" field.
func TermLT(v int) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldLT(FieldTerm, v))
}

// TermLTE applies the LTE predicate on the "term" field.
func TermLTE(v int) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldLTE(FieldTerm, v))
}

// SatisfactionLevelEQ applies the EQ predicate on the "satisfaction_level" field.
func SatisfactionLevelEQ(v int) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldEQ(FieldSatisfactionLevel, v))
}

// SatisfactionLevelNEQ applies the NEQ predicate on the "satisfaction_level" field.
func SatisfactionLevelNEQ(v int) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldNEQ(FieldSatisfactionLevel, v))
}

// SatisfactionLevelIn applies the In predicate on the "satisfaction_level" field.
func SatisfactionLevelIn(vs ...int) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldIn(FieldSatisfactionLevel, vs...))
}

// SatisfactionLevelNotIn applies the NotIn predicate on the "satisfaction_level" field.
func SatisfactionLevelNotIn(vs ...int) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldNotIn(FieldSatisfactionLevel, vs...))
}

// SatisfactionLevelGT applies the GT predicate on the "satisfaction_level" field.
func SatisfactionLevelGT(v int) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldGT(FieldSatisfactionLevel, v))
}

// SatisfactionLevelGTE applies the GTE predicate on the "satisfaction_level" field.
func SatisfactionLevelGTE(v int) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldGTE(FieldSatisfactionLevel, v))
}

// SatisfactionLevelLT applies the LT predicate on the "satisfaction_level" field.
func SatisfactionLevelLT(v int) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldLT(FieldSatisfactionLevel, v))
}

// SatisfactionLevelLTE applies the LTE predicate on the "satisfaction_level" field.
func SatisfactionLevelLTE(v int) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldLTE(FieldSatisfactionLevel, v))
}

// EasyLevelEQ applies the EQ predicate on the "easy_level" field.
func EasyLevelEQ(v int) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldEQ(FieldEasyLevel, v))
}

// EasyLevelNEQ applies the NEQ predicate on the "easy_level" field.
func EasyLevelNEQ(v int) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldNEQ(FieldEasyLevel, v))
}

// EasyLevelIn applies the In predicate on the "easy_level" field.
func EasyLevelIn(vs ...int) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldIn(FieldEasyLevel, vs...))
}

// EasyLevelNotIn applies the NotIn predicate on the "easy_level" field.
func EasyLevelNotIn(vs ...int) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldNotIn(FieldEasyLevel, vs...))
}

// EasyLevelGT applies the GT predicate on the "easy_level" field.
func EasyLevelGT(v int) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldGT(FieldEasyLevel, v))
}

// EasyLevelGTE applies the GTE predicate on the "easy_level" field.
func EasyLevelGTE(v int) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldGTE(FieldEasyLevel, v))
}

// EasyLevelLT applies the LT predicate on the "easy_level" field.
func EasyLevelLT(v int) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldLT(FieldEasyLevel, v))
}

// EasyLevelLTE applies the LTE predicate on the "easy_level" field.
func EasyLevelLTE(v int) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldLTE(FieldEasyLevel, v))
}

// AttendanceMethodEQ applies the EQ predicate on the "attendance_method" field.
func AttendanceMethodEQ(v int) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldEQ(FieldAttendanceMethod, v))
}

// AttendanceMethodNEQ applies the NEQ predicate on the "attendance_method" field.
func AttendanceMethodNEQ(v int) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldNEQ(FieldAttendanceMethod, v))
}

// AttendanceMethodIn applies the In predicate on the "attendance_method" field.
func AttendanceMethodIn(vs ...int) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldIn(FieldAttendanceMethod, vs...))
}

// AttendanceMethodNotIn applies the NotIn predicate on the "attendance_method" field.
func AttendanceMethodNotIn(vs ...int) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldNotIn(FieldAttendanceMethod, vs...))
}

// AttendanceMethodGT applies the GT predicate on the "attendance_method" field.
func AttendanceMethodGT(v int) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldGT(FieldAttendanceMethod, v))
}

// AttendanceMethodGTE applies the GTE predicate on the "attendance_method" field.
func AttendanceMethodGTE(v int) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldGTE(FieldAttendanceMethod, v))
}

// AttendanceMethodLT applies the LT predicate on the "attendance_method" field.
func AttendanceMethodLT(v int) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldLT(FieldAttendanceMethod, v))
}

// AttendanceMethodLTE applies the LTE predicate on the "attendance_method" field.
func AttendanceMethodLTE(v int) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldLTE(FieldAttendanceMethod, v))
}

// EvaluationMethodEQ applies the EQ predicate on the "evaluation_method" field.
func EvaluationMethodEQ(v int) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldEQ(FieldEvaluationMethod, v))
}

// EvaluationMethodNEQ applies the NEQ predicate on the "evaluation_method" field.
func EvaluationMethodNEQ(v int) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldNEQ(FieldEvaluationMethod, v))
}

// EvaluationMethodIn applies the In predicate on the "evaluation_method" field.
func EvaluationMethodIn(vs ...int) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldIn(FieldEvaluationMethod, vs...))
}

// EvaluationMethodNotIn applies the NotIn predicate on the "evaluation_method" field.
func EvaluationMethodNotIn(vs ...int) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldNotIn(FieldEvaluationMethod, vs...))
}

// EvaluationMethodGT applies the GT predicate on the "evaluation_method" field.
func EvaluationMethodGT(v int) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldGT(FieldEvaluationMethod, v))
}

// EvaluationMethodGTE applies the GTE predicate on the "evaluation_method" field.
func EvaluationMethodGTE(v int) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldGTE(FieldEvaluationMethod, v))
}

// EvaluationMethodLT applies the LT predicate on the "evaluation_method" field.
func EvaluationMethodLT(v int) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldLT(FieldEvaluationMethod, v))
}

// EvaluationMethodLTE applies the LTE predicate on the "evaluation_method" field.
func EvaluationMethodLTE(v int) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldLTE(FieldEvaluationMethod, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ClassReview {
	return predicate.ClassReview(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasUsers applies the HasEdge predicate on the "users" edge.
func HasUsers() predicate.ClassReview {
	return predicate.ClassReview(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UsersTable, UsersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUsersWith applies the HasEdge predicate on the "users" edge with a given conditions (other predicates).
func HasUsersWith(preds ...predicate.User) predicate.ClassReview {
	return predicate.ClassReview(func(s *sql.Selector) {
		step := newUsersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasClassReviewLikes applies the HasEdge predicate on the "class_review_likes" edge.
func HasClassReviewLikes() predicate.ClassReview {
	return predicate.ClassReview(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ClassReviewLikesTable, ClassReviewLikesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasClassReviewLikesWith applies the HasEdge predicate on the "class_review_likes" edge with a given conditions (other predicates).
func HasClassReviewLikesWith(preds ...predicate.ClassReviewLike) predicate.ClassReview {
	return predicate.ClassReview(func(s *sql.Selector) {
		step := newClassReviewLikesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ClassReview) predicate.ClassReview {
	return predicate.ClassReview(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ClassReview) predicate.ClassReview {
	return predicate.ClassReview(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ClassReview) predicate.ClassReview {
	return predicate.ClassReview(sql.NotPredicates(p))
}
