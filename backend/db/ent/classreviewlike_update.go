// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yudai2929/kendai-navi/backend/db/ent/classreview"
	"github.com/yudai2929/kendai-navi/backend/db/ent/classreviewlike"
	"github.com/yudai2929/kendai-navi/backend/db/ent/predicate"
	"github.com/yudai2929/kendai-navi/backend/db/ent/user"
)

// ClassReviewLikeUpdate is the builder for updating ClassReviewLike entities.
type ClassReviewLikeUpdate struct {
	config
	hooks    []Hook
	mutation *ClassReviewLikeMutation
}

// Where appends a list predicates to the ClassReviewLikeUpdate builder.
func (crlu *ClassReviewLikeUpdate) Where(ps ...predicate.ClassReviewLike) *ClassReviewLikeUpdate {
	crlu.mutation.Where(ps...)
	return crlu
}

// SetUserID sets the "user_id" field.
func (crlu *ClassReviewLikeUpdate) SetUserID(s string) *ClassReviewLikeUpdate {
	crlu.mutation.SetUserID(s)
	return crlu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (crlu *ClassReviewLikeUpdate) SetNillableUserID(s *string) *ClassReviewLikeUpdate {
	if s != nil {
		crlu.SetUserID(*s)
	}
	return crlu
}

// SetClassReviewID sets the "class_review_id" field.
func (crlu *ClassReviewLikeUpdate) SetClassReviewID(s string) *ClassReviewLikeUpdate {
	crlu.mutation.SetClassReviewID(s)
	return crlu
}

// SetNillableClassReviewID sets the "class_review_id" field if the given value is not nil.
func (crlu *ClassReviewLikeUpdate) SetNillableClassReviewID(s *string) *ClassReviewLikeUpdate {
	if s != nil {
		crlu.SetClassReviewID(*s)
	}
	return crlu
}

// SetCreatedAt sets the "created_at" field.
func (crlu *ClassReviewLikeUpdate) SetCreatedAt(t time.Time) *ClassReviewLikeUpdate {
	crlu.mutation.SetCreatedAt(t)
	return crlu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (crlu *ClassReviewLikeUpdate) SetNillableCreatedAt(t *time.Time) *ClassReviewLikeUpdate {
	if t != nil {
		crlu.SetCreatedAt(*t)
	}
	return crlu
}

// SetUpdatedAt sets the "updated_at" field.
func (crlu *ClassReviewLikeUpdate) SetUpdatedAt(t time.Time) *ClassReviewLikeUpdate {
	crlu.mutation.SetUpdatedAt(t)
	return crlu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (crlu *ClassReviewLikeUpdate) SetNillableUpdatedAt(t *time.Time) *ClassReviewLikeUpdate {
	if t != nil {
		crlu.SetUpdatedAt(*t)
	}
	return crlu
}

// SetUsersID sets the "users" edge to the User entity by ID.
func (crlu *ClassReviewLikeUpdate) SetUsersID(id string) *ClassReviewLikeUpdate {
	crlu.mutation.SetUsersID(id)
	return crlu
}

// SetUsers sets the "users" edge to the User entity.
func (crlu *ClassReviewLikeUpdate) SetUsers(u *User) *ClassReviewLikeUpdate {
	return crlu.SetUsersID(u.ID)
}

// SetClassReviewsID sets the "class_reviews" edge to the ClassReview entity by ID.
func (crlu *ClassReviewLikeUpdate) SetClassReviewsID(id string) *ClassReviewLikeUpdate {
	crlu.mutation.SetClassReviewsID(id)
	return crlu
}

// SetClassReviews sets the "class_reviews" edge to the ClassReview entity.
func (crlu *ClassReviewLikeUpdate) SetClassReviews(c *ClassReview) *ClassReviewLikeUpdate {
	return crlu.SetClassReviewsID(c.ID)
}

// Mutation returns the ClassReviewLikeMutation object of the builder.
func (crlu *ClassReviewLikeUpdate) Mutation() *ClassReviewLikeMutation {
	return crlu.mutation
}

// ClearUsers clears the "users" edge to the User entity.
func (crlu *ClassReviewLikeUpdate) ClearUsers() *ClassReviewLikeUpdate {
	crlu.mutation.ClearUsers()
	return crlu
}

// ClearClassReviews clears the "class_reviews" edge to the ClassReview entity.
func (crlu *ClassReviewLikeUpdate) ClearClassReviews() *ClassReviewLikeUpdate {
	crlu.mutation.ClearClassReviews()
	return crlu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (crlu *ClassReviewLikeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, crlu.sqlSave, crlu.mutation, crlu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (crlu *ClassReviewLikeUpdate) SaveX(ctx context.Context) int {
	affected, err := crlu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (crlu *ClassReviewLikeUpdate) Exec(ctx context.Context) error {
	_, err := crlu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (crlu *ClassReviewLikeUpdate) ExecX(ctx context.Context) {
	if err := crlu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (crlu *ClassReviewLikeUpdate) check() error {
	if _, ok := crlu.mutation.UsersID(); crlu.mutation.UsersCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ClassReviewLike.users"`)
	}
	if _, ok := crlu.mutation.ClassReviewsID(); crlu.mutation.ClassReviewsCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ClassReviewLike.class_reviews"`)
	}
	return nil
}

func (crlu *ClassReviewLikeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := crlu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(classreviewlike.Table, classreviewlike.Columns, sqlgraph.NewFieldSpec(classreviewlike.FieldID, field.TypeInt))
	if ps := crlu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := crlu.mutation.CreatedAt(); ok {
		_spec.SetField(classreviewlike.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := crlu.mutation.UpdatedAt(); ok {
		_spec.SetField(classreviewlike.FieldUpdatedAt, field.TypeTime, value)
	}
	if crlu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   classreviewlike.UsersTable,
			Columns: []string{classreviewlike.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := crlu.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   classreviewlike.UsersTable,
			Columns: []string{classreviewlike.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if crlu.mutation.ClassReviewsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   classreviewlike.ClassReviewsTable,
			Columns: []string{classreviewlike.ClassReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(classreview.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := crlu.mutation.ClassReviewsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   classreviewlike.ClassReviewsTable,
			Columns: []string{classreviewlike.ClassReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(classreview.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, crlu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{classreviewlike.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	crlu.mutation.done = true
	return n, nil
}

// ClassReviewLikeUpdateOne is the builder for updating a single ClassReviewLike entity.
type ClassReviewLikeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ClassReviewLikeMutation
}

// SetUserID sets the "user_id" field.
func (crluo *ClassReviewLikeUpdateOne) SetUserID(s string) *ClassReviewLikeUpdateOne {
	crluo.mutation.SetUserID(s)
	return crluo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (crluo *ClassReviewLikeUpdateOne) SetNillableUserID(s *string) *ClassReviewLikeUpdateOne {
	if s != nil {
		crluo.SetUserID(*s)
	}
	return crluo
}

// SetClassReviewID sets the "class_review_id" field.
func (crluo *ClassReviewLikeUpdateOne) SetClassReviewID(s string) *ClassReviewLikeUpdateOne {
	crluo.mutation.SetClassReviewID(s)
	return crluo
}

// SetNillableClassReviewID sets the "class_review_id" field if the given value is not nil.
func (crluo *ClassReviewLikeUpdateOne) SetNillableClassReviewID(s *string) *ClassReviewLikeUpdateOne {
	if s != nil {
		crluo.SetClassReviewID(*s)
	}
	return crluo
}

// SetCreatedAt sets the "created_at" field.
func (crluo *ClassReviewLikeUpdateOne) SetCreatedAt(t time.Time) *ClassReviewLikeUpdateOne {
	crluo.mutation.SetCreatedAt(t)
	return crluo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (crluo *ClassReviewLikeUpdateOne) SetNillableCreatedAt(t *time.Time) *ClassReviewLikeUpdateOne {
	if t != nil {
		crluo.SetCreatedAt(*t)
	}
	return crluo
}

// SetUpdatedAt sets the "updated_at" field.
func (crluo *ClassReviewLikeUpdateOne) SetUpdatedAt(t time.Time) *ClassReviewLikeUpdateOne {
	crluo.mutation.SetUpdatedAt(t)
	return crluo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (crluo *ClassReviewLikeUpdateOne) SetNillableUpdatedAt(t *time.Time) *ClassReviewLikeUpdateOne {
	if t != nil {
		crluo.SetUpdatedAt(*t)
	}
	return crluo
}

// SetUsersID sets the "users" edge to the User entity by ID.
func (crluo *ClassReviewLikeUpdateOne) SetUsersID(id string) *ClassReviewLikeUpdateOne {
	crluo.mutation.SetUsersID(id)
	return crluo
}

// SetUsers sets the "users" edge to the User entity.
func (crluo *ClassReviewLikeUpdateOne) SetUsers(u *User) *ClassReviewLikeUpdateOne {
	return crluo.SetUsersID(u.ID)
}

// SetClassReviewsID sets the "class_reviews" edge to the ClassReview entity by ID.
func (crluo *ClassReviewLikeUpdateOne) SetClassReviewsID(id string) *ClassReviewLikeUpdateOne {
	crluo.mutation.SetClassReviewsID(id)
	return crluo
}

// SetClassReviews sets the "class_reviews" edge to the ClassReview entity.
func (crluo *ClassReviewLikeUpdateOne) SetClassReviews(c *ClassReview) *ClassReviewLikeUpdateOne {
	return crluo.SetClassReviewsID(c.ID)
}

// Mutation returns the ClassReviewLikeMutation object of the builder.
func (crluo *ClassReviewLikeUpdateOne) Mutation() *ClassReviewLikeMutation {
	return crluo.mutation
}

// ClearUsers clears the "users" edge to the User entity.
func (crluo *ClassReviewLikeUpdateOne) ClearUsers() *ClassReviewLikeUpdateOne {
	crluo.mutation.ClearUsers()
	return crluo
}

// ClearClassReviews clears the "class_reviews" edge to the ClassReview entity.
func (crluo *ClassReviewLikeUpdateOne) ClearClassReviews() *ClassReviewLikeUpdateOne {
	crluo.mutation.ClearClassReviews()
	return crluo
}

// Where appends a list predicates to the ClassReviewLikeUpdate builder.
func (crluo *ClassReviewLikeUpdateOne) Where(ps ...predicate.ClassReviewLike) *ClassReviewLikeUpdateOne {
	crluo.mutation.Where(ps...)
	return crluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (crluo *ClassReviewLikeUpdateOne) Select(field string, fields ...string) *ClassReviewLikeUpdateOne {
	crluo.fields = append([]string{field}, fields...)
	return crluo
}

// Save executes the query and returns the updated ClassReviewLike entity.
func (crluo *ClassReviewLikeUpdateOne) Save(ctx context.Context) (*ClassReviewLike, error) {
	return withHooks(ctx, crluo.sqlSave, crluo.mutation, crluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (crluo *ClassReviewLikeUpdateOne) SaveX(ctx context.Context) *ClassReviewLike {
	node, err := crluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (crluo *ClassReviewLikeUpdateOne) Exec(ctx context.Context) error {
	_, err := crluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (crluo *ClassReviewLikeUpdateOne) ExecX(ctx context.Context) {
	if err := crluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (crluo *ClassReviewLikeUpdateOne) check() error {
	if _, ok := crluo.mutation.UsersID(); crluo.mutation.UsersCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ClassReviewLike.users"`)
	}
	if _, ok := crluo.mutation.ClassReviewsID(); crluo.mutation.ClassReviewsCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ClassReviewLike.class_reviews"`)
	}
	return nil
}

func (crluo *ClassReviewLikeUpdateOne) sqlSave(ctx context.Context) (_node *ClassReviewLike, err error) {
	if err := crluo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(classreviewlike.Table, classreviewlike.Columns, sqlgraph.NewFieldSpec(classreviewlike.FieldID, field.TypeInt))
	id, ok := crluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ClassReviewLike.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := crluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, classreviewlike.FieldID)
		for _, f := range fields {
			if !classreviewlike.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != classreviewlike.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := crluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := crluo.mutation.CreatedAt(); ok {
		_spec.SetField(classreviewlike.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := crluo.mutation.UpdatedAt(); ok {
		_spec.SetField(classreviewlike.FieldUpdatedAt, field.TypeTime, value)
	}
	if crluo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   classreviewlike.UsersTable,
			Columns: []string{classreviewlike.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := crluo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   classreviewlike.UsersTable,
			Columns: []string{classreviewlike.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if crluo.mutation.ClassReviewsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   classreviewlike.ClassReviewsTable,
			Columns: []string{classreviewlike.ClassReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(classreview.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := crluo.mutation.ClassReviewsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   classreviewlike.ClassReviewsTable,
			Columns: []string{classreviewlike.ClassReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(classreview.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ClassReviewLike{config: crluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, crluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{classreviewlike.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	crluo.mutation.done = true
	return _node, nil
}
