// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/yudai2929/kendai-navi/backend/db/ent/classreview"
	"github.com/yudai2929/kendai-navi/backend/db/ent/user"
)

// ClassReview is the model entity for the ClassReview schema.
type ClassReview struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID string `json:"user_id,omitempty"`
	// ClassID holds the value of the "class_id" field.
	ClassID int `json:"class_id,omitempty"`
	// TeacherID holds the value of the "teacher_id" field.
	TeacherID int `json:"teacher_id,omitempty"`
	// Comment holds the value of the "comment" field.
	Comment string `json:"comment,omitempty"`
	// ClassYear holds the value of the "class_year" field.
	ClassYear int `json:"class_year,omitempty"`
	// Term holds the value of the "term" field.
	Term int `json:"term,omitempty"`
	// SatisfactionLevel holds the value of the "satisfaction_level" field.
	SatisfactionLevel int `json:"satisfaction_level,omitempty"`
	// EasyLevel holds the value of the "easy_level" field.
	EasyLevel int `json:"easy_level,omitempty"`
	// AttendanceMethod holds the value of the "attendance_method" field.
	AttendanceMethod int `json:"attendance_method,omitempty"`
	// EvaluationMethod holds the value of the "evaluation_method" field.
	EvaluationMethod int `json:"evaluation_method,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ClassReviewQuery when eager-loading is set.
	Edges        ClassReviewEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ClassReviewEdges holds the relations/edges for other nodes in the graph.
type ClassReviewEdges struct {
	// Users holds the value of the users edge.
	Users *User `json:"users,omitempty"`
	// ClassReviewLikes holds the value of the class_review_likes edge.
	ClassReviewLikes []*ClassReviewLike `json:"class_review_likes,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ClassReviewEdges) UsersOrErr() (*User, error) {
	if e.Users != nil {
		return e.Users, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "users"}
}

// ClassReviewLikesOrErr returns the ClassReviewLikes value or an error if the edge
// was not loaded in eager-loading.
func (e ClassReviewEdges) ClassReviewLikesOrErr() ([]*ClassReviewLike, error) {
	if e.loadedTypes[1] {
		return e.ClassReviewLikes, nil
	}
	return nil, &NotLoadedError{edge: "class_review_likes"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ClassReview) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case classreview.FieldClassID, classreview.FieldTeacherID, classreview.FieldClassYear, classreview.FieldTerm, classreview.FieldSatisfactionLevel, classreview.FieldEasyLevel, classreview.FieldAttendanceMethod, classreview.FieldEvaluationMethod:
			values[i] = new(sql.NullInt64)
		case classreview.FieldID, classreview.FieldUserID, classreview.FieldComment:
			values[i] = new(sql.NullString)
		case classreview.FieldCreatedAt, classreview.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ClassReview fields.
func (cr *ClassReview) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case classreview.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				cr.ID = value.String
			}
		case classreview.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				cr.UserID = value.String
			}
		case classreview.FieldClassID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field class_id", values[i])
			} else if value.Valid {
				cr.ClassID = int(value.Int64)
			}
		case classreview.FieldTeacherID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field teacher_id", values[i])
			} else if value.Valid {
				cr.TeacherID = int(value.Int64)
			}
		case classreview.FieldComment:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field comment", values[i])
			} else if value.Valid {
				cr.Comment = value.String
			}
		case classreview.FieldClassYear:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field class_year", values[i])
			} else if value.Valid {
				cr.ClassYear = int(value.Int64)
			}
		case classreview.FieldTerm:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field term", values[i])
			} else if value.Valid {
				cr.Term = int(value.Int64)
			}
		case classreview.FieldSatisfactionLevel:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field satisfaction_level", values[i])
			} else if value.Valid {
				cr.SatisfactionLevel = int(value.Int64)
			}
		case classreview.FieldEasyLevel:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field easy_level", values[i])
			} else if value.Valid {
				cr.EasyLevel = int(value.Int64)
			}
		case classreview.FieldAttendanceMethod:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field attendance_method", values[i])
			} else if value.Valid {
				cr.AttendanceMethod = int(value.Int64)
			}
		case classreview.FieldEvaluationMethod:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field evaluation_method", values[i])
			} else if value.Valid {
				cr.EvaluationMethod = int(value.Int64)
			}
		case classreview.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				cr.CreatedAt = value.Time
			}
		case classreview.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				cr.UpdatedAt = value.Time
			}
		default:
			cr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ClassReview.
// This includes values selected through modifiers, order, etc.
func (cr *ClassReview) Value(name string) (ent.Value, error) {
	return cr.selectValues.Get(name)
}

// QueryUsers queries the "users" edge of the ClassReview entity.
func (cr *ClassReview) QueryUsers() *UserQuery {
	return NewClassReviewClient(cr.config).QueryUsers(cr)
}

// QueryClassReviewLikes queries the "class_review_likes" edge of the ClassReview entity.
func (cr *ClassReview) QueryClassReviewLikes() *ClassReviewLikeQuery {
	return NewClassReviewClient(cr.config).QueryClassReviewLikes(cr)
}

// Update returns a builder for updating this ClassReview.
// Note that you need to call ClassReview.Unwrap() before calling this method if this ClassReview
// was returned from a transaction, and the transaction was committed or rolled back.
func (cr *ClassReview) Update() *ClassReviewUpdateOne {
	return NewClassReviewClient(cr.config).UpdateOne(cr)
}

// Unwrap unwraps the ClassReview entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cr *ClassReview) Unwrap() *ClassReview {
	_tx, ok := cr.config.driver.(*txDriver)
	if !ok {
		panic("ent: ClassReview is not a transactional entity")
	}
	cr.config.driver = _tx.drv
	return cr
}

// String implements the fmt.Stringer.
func (cr *ClassReview) String() string {
	var builder strings.Builder
	builder.WriteString("ClassReview(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cr.ID))
	builder.WriteString("user_id=")
	builder.WriteString(cr.UserID)
	builder.WriteString(", ")
	builder.WriteString("class_id=")
	builder.WriteString(fmt.Sprintf("%v", cr.ClassID))
	builder.WriteString(", ")
	builder.WriteString("teacher_id=")
	builder.WriteString(fmt.Sprintf("%v", cr.TeacherID))
	builder.WriteString(", ")
	builder.WriteString("comment=")
	builder.WriteString(cr.Comment)
	builder.WriteString(", ")
	builder.WriteString("class_year=")
	builder.WriteString(fmt.Sprintf("%v", cr.ClassYear))
	builder.WriteString(", ")
	builder.WriteString("term=")
	builder.WriteString(fmt.Sprintf("%v", cr.Term))
	builder.WriteString(", ")
	builder.WriteString("satisfaction_level=")
	builder.WriteString(fmt.Sprintf("%v", cr.SatisfactionLevel))
	builder.WriteString(", ")
	builder.WriteString("easy_level=")
	builder.WriteString(fmt.Sprintf("%v", cr.EasyLevel))
	builder.WriteString(", ")
	builder.WriteString("attendance_method=")
	builder.WriteString(fmt.Sprintf("%v", cr.AttendanceMethod))
	builder.WriteString(", ")
	builder.WriteString("evaluation_method=")
	builder.WriteString(fmt.Sprintf("%v", cr.EvaluationMethod))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(cr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(cr.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ClassReviews is a parsable slice of ClassReview.
type ClassReviews []*ClassReview
