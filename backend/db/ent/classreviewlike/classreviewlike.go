// Code generated by ent, DO NOT EDIT.

package classreviewlike

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the classreviewlike type in the database.
	Label = "class_review_like"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldClassReviewID holds the string denoting the class_review_id field in the database.
	FieldClassReviewID = "class_review_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeUsers holds the string denoting the users edge name in mutations.
	EdgeUsers = "users"
	// EdgeClassReviews holds the string denoting the class_reviews edge name in mutations.
	EdgeClassReviews = "class_reviews"
	// Table holds the table name of the classreviewlike in the database.
	Table = "class_review_likes"
	// UsersTable is the table that holds the users relation/edge.
	UsersTable = "class_review_likes"
	// UsersInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UsersInverseTable = "users"
	// UsersColumn is the table column denoting the users relation/edge.
	UsersColumn = "user_id"
	// ClassReviewsTable is the table that holds the class_reviews relation/edge.
	ClassReviewsTable = "class_review_likes"
	// ClassReviewsInverseTable is the table name for the ClassReview entity.
	// It exists in this package in order to avoid circular dependency with the "classreview" package.
	ClassReviewsInverseTable = "class_reviews"
	// ClassReviewsColumn is the table column denoting the class_reviews relation/edge.
	ClassReviewsColumn = "class_review_id"
)

// Columns holds all SQL columns for classreviewlike fields.
var Columns = []string{
	FieldID,
	FieldUserID,
	FieldClassReviewID,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the ClassReviewLike queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByClassReviewID orders the results by the class_review_id field.
func ByClassReviewID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClassReviewID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByUsersField orders the results by users field.
func ByUsersField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUsersStep(), sql.OrderByField(field, opts...))
	}
}

// ByClassReviewsField orders the results by class_reviews field.
func ByClassReviewsField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newClassReviewsStep(), sql.OrderByField(field, opts...))
	}
}
func newUsersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UsersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UsersTable, UsersColumn),
	)
}
func newClassReviewsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ClassReviewsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ClassReviewsTable, ClassReviewsColumn),
	)
}
