// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/yudai2929/kendai-navi/backend/db/ent/classreview"
	"github.com/yudai2929/kendai-navi/backend/db/ent/classreviewlike"
	"github.com/yudai2929/kendai-navi/backend/db/ent/user"
)

// ClassReviewLike is the model entity for the ClassReviewLike schema.
type ClassReviewLike struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID string `json:"user_id,omitempty"`
	// ClassReviewID holds the value of the "class_review_id" field.
	ClassReviewID string `json:"class_review_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ClassReviewLikeQuery when eager-loading is set.
	Edges        ClassReviewLikeEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ClassReviewLikeEdges holds the relations/edges for other nodes in the graph.
type ClassReviewLikeEdges struct {
	// Users holds the value of the users edge.
	Users *User `json:"users,omitempty"`
	// ClassReviews holds the value of the class_reviews edge.
	ClassReviews *ClassReview `json:"class_reviews,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ClassReviewLikeEdges) UsersOrErr() (*User, error) {
	if e.Users != nil {
		return e.Users, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "users"}
}

// ClassReviewsOrErr returns the ClassReviews value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ClassReviewLikeEdges) ClassReviewsOrErr() (*ClassReview, error) {
	if e.ClassReviews != nil {
		return e.ClassReviews, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: classreview.Label}
	}
	return nil, &NotLoadedError{edge: "class_reviews"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ClassReviewLike) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case classreviewlike.FieldID:
			values[i] = new(sql.NullInt64)
		case classreviewlike.FieldUserID, classreviewlike.FieldClassReviewID:
			values[i] = new(sql.NullString)
		case classreviewlike.FieldCreatedAt, classreviewlike.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ClassReviewLike fields.
func (crl *ClassReviewLike) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case classreviewlike.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			crl.ID = int(value.Int64)
		case classreviewlike.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				crl.UserID = value.String
			}
		case classreviewlike.FieldClassReviewID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field class_review_id", values[i])
			} else if value.Valid {
				crl.ClassReviewID = value.String
			}
		case classreviewlike.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				crl.CreatedAt = value.Time
			}
		case classreviewlike.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				crl.UpdatedAt = value.Time
			}
		default:
			crl.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ClassReviewLike.
// This includes values selected through modifiers, order, etc.
func (crl *ClassReviewLike) Value(name string) (ent.Value, error) {
	return crl.selectValues.Get(name)
}

// QueryUsers queries the "users" edge of the ClassReviewLike entity.
func (crl *ClassReviewLike) QueryUsers() *UserQuery {
	return NewClassReviewLikeClient(crl.config).QueryUsers(crl)
}

// QueryClassReviews queries the "class_reviews" edge of the ClassReviewLike entity.
func (crl *ClassReviewLike) QueryClassReviews() *ClassReviewQuery {
	return NewClassReviewLikeClient(crl.config).QueryClassReviews(crl)
}

// Update returns a builder for updating this ClassReviewLike.
// Note that you need to call ClassReviewLike.Unwrap() before calling this method if this ClassReviewLike
// was returned from a transaction, and the transaction was committed or rolled back.
func (crl *ClassReviewLike) Update() *ClassReviewLikeUpdateOne {
	return NewClassReviewLikeClient(crl.config).UpdateOne(crl)
}

// Unwrap unwraps the ClassReviewLike entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (crl *ClassReviewLike) Unwrap() *ClassReviewLike {
	_tx, ok := crl.config.driver.(*txDriver)
	if !ok {
		panic("ent: ClassReviewLike is not a transactional entity")
	}
	crl.config.driver = _tx.drv
	return crl
}

// String implements the fmt.Stringer.
func (crl *ClassReviewLike) String() string {
	var builder strings.Builder
	builder.WriteString("ClassReviewLike(")
	builder.WriteString(fmt.Sprintf("id=%v, ", crl.ID))
	builder.WriteString("user_id=")
	builder.WriteString(crl.UserID)
	builder.WriteString(", ")
	builder.WriteString("class_review_id=")
	builder.WriteString(crl.ClassReviewID)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(crl.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(crl.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ClassReviewLikes is a parsable slice of ClassReviewLike.
type ClassReviewLikes []*ClassReviewLike
