// Code generated by ent, DO NOT EDIT.

package user

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/yudai2929/kendai-navi/backend/db/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.User {
	return predicate.User(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.User {
	return predicate.User(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldID, id))
}

// Nickname applies equality check predicate on the "nickname" field. It's identical to NicknameEQ.
func Nickname(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldNickname, v))
}

// FirebaseUID applies equality check predicate on the "firebase_uid" field. It's identical to FirebaseUIDEQ.
func FirebaseUID(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldFirebaseUID, v))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmail, v))
}

// ProfileImageURL applies equality check predicate on the "profile_image_url" field. It's identical to ProfileImageURLEQ.
func ProfileImageURL(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldProfileImageURL, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdatedAt, v))
}

// NicknameEQ applies the EQ predicate on the "nickname" field.
func NicknameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldNickname, v))
}

// NicknameNEQ applies the NEQ predicate on the "nickname" field.
func NicknameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldNickname, v))
}

// NicknameIn applies the In predicate on the "nickname" field.
func NicknameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldNickname, vs...))
}

// NicknameNotIn applies the NotIn predicate on the "nickname" field.
func NicknameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldNickname, vs...))
}

// NicknameGT applies the GT predicate on the "nickname" field.
func NicknameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldNickname, v))
}

// NicknameGTE applies the GTE predicate on the "nickname" field.
func NicknameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldNickname, v))
}

// NicknameLT applies the LT predicate on the "nickname" field.
func NicknameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldNickname, v))
}

// NicknameLTE applies the LTE predicate on the "nickname" field.
func NicknameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldNickname, v))
}

// NicknameContains applies the Contains predicate on the "nickname" field.
func NicknameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldNickname, v))
}

// NicknameHasPrefix applies the HasPrefix predicate on the "nickname" field.
func NicknameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldNickname, v))
}

// NicknameHasSuffix applies the HasSuffix predicate on the "nickname" field.
func NicknameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldNickname, v))
}

// NicknameEqualFold applies the EqualFold predicate on the "nickname" field.
func NicknameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldNickname, v))
}

// NicknameContainsFold applies the ContainsFold predicate on the "nickname" field.
func NicknameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldNickname, v))
}

// FirebaseUIDEQ applies the EQ predicate on the "firebase_uid" field.
func FirebaseUIDEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldFirebaseUID, v))
}

// FirebaseUIDNEQ applies the NEQ predicate on the "firebase_uid" field.
func FirebaseUIDNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldFirebaseUID, v))
}

// FirebaseUIDIn applies the In predicate on the "firebase_uid" field.
func FirebaseUIDIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldFirebaseUID, vs...))
}

// FirebaseUIDNotIn applies the NotIn predicate on the "firebase_uid" field.
func FirebaseUIDNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldFirebaseUID, vs...))
}

// FirebaseUIDGT applies the GT predicate on the "firebase_uid" field.
func FirebaseUIDGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldFirebaseUID, v))
}

// FirebaseUIDGTE applies the GTE predicate on the "firebase_uid" field.
func FirebaseUIDGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldFirebaseUID, v))
}

// FirebaseUIDLT applies the LT predicate on the "firebase_uid" field.
func FirebaseUIDLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldFirebaseUID, v))
}

// FirebaseUIDLTE applies the LTE predicate on the "firebase_uid" field.
func FirebaseUIDLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldFirebaseUID, v))
}

// FirebaseUIDContains applies the Contains predicate on the "firebase_uid" field.
func FirebaseUIDContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldFirebaseUID, v))
}

// FirebaseUIDHasPrefix applies the HasPrefix predicate on the "firebase_uid" field.
func FirebaseUIDHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldFirebaseUID, v))
}

// FirebaseUIDHasSuffix applies the HasSuffix predicate on the "firebase_uid" field.
func FirebaseUIDHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldFirebaseUID, v))
}

// FirebaseUIDEqualFold applies the EqualFold predicate on the "firebase_uid" field.
func FirebaseUIDEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldFirebaseUID, v))
}

// FirebaseUIDContainsFold applies the ContainsFold predicate on the "firebase_uid" field.
func FirebaseUIDContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldFirebaseUID, v))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldEmail, v))
}

// ProfileImageURLEQ applies the EQ predicate on the "profile_image_url" field.
func ProfileImageURLEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldProfileImageURL, v))
}

// ProfileImageURLNEQ applies the NEQ predicate on the "profile_image_url" field.
func ProfileImageURLNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldProfileImageURL, v))
}

// ProfileImageURLIn applies the In predicate on the "profile_image_url" field.
func ProfileImageURLIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldProfileImageURL, vs...))
}

// ProfileImageURLNotIn applies the NotIn predicate on the "profile_image_url" field.
func ProfileImageURLNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldProfileImageURL, vs...))
}

// ProfileImageURLGT applies the GT predicate on the "profile_image_url" field.
func ProfileImageURLGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldProfileImageURL, v))
}

// ProfileImageURLGTE applies the GTE predicate on the "profile_image_url" field.
func ProfileImageURLGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldProfileImageURL, v))
}

// ProfileImageURLLT applies the LT predicate on the "profile_image_url" field.
func ProfileImageURLLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldProfileImageURL, v))
}

// ProfileImageURLLTE applies the LTE predicate on the "profile_image_url" field.
func ProfileImageURLLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldProfileImageURL, v))
}

// ProfileImageURLContains applies the Contains predicate on the "profile_image_url" field.
func ProfileImageURLContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldProfileImageURL, v))
}

// ProfileImageURLHasPrefix applies the HasPrefix predicate on the "profile_image_url" field.
func ProfileImageURLHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldProfileImageURL, v))
}

// ProfileImageURLHasSuffix applies the HasSuffix predicate on the "profile_image_url" field.
func ProfileImageURLHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldProfileImageURL, v))
}

// ProfileImageURLEqualFold applies the EqualFold predicate on the "profile_image_url" field.
func ProfileImageURLEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldProfileImageURL, v))
}

// ProfileImageURLContainsFold applies the ContainsFold predicate on the "profile_image_url" field.
func ProfileImageURLContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldProfileImageURL, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasClassReviews applies the HasEdge predicate on the "class_reviews" edge.
func HasClassReviews() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ClassReviewsTable, ClassReviewsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasClassReviewsWith applies the HasEdge predicate on the "class_reviews" edge with a given conditions (other predicates).
func HasClassReviewsWith(preds ...predicate.ClassReview) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newClassReviewsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasClassReviewLikes applies the HasEdge predicate on the "class_review_likes" edge.
func HasClassReviewLikes() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ClassReviewLikesTable, ClassReviewLikesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasClassReviewLikesWith applies the HasEdge predicate on the "class_review_likes" edge with a given conditions (other predicates).
func HasClassReviewLikesWith(preds ...predicate.ClassReviewLike) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newClassReviewLikesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(sql.NotPredicates(p))
}
